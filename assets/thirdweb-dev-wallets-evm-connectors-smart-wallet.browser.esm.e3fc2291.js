import{S as _,d as R,r as f,C as k,g as B,E as H,a as G,A as x,B as d,T as C,t as U,b as K,f as $,h as D,c as V,e as S,L as W,i as M,j as z,k as j,s as L,J,l as q,_ as N,m as Y,n as Z,o as Q,p as X,q as A,u as T}from"./index.7594c645.js";import{i as F}from"./url-a45219bd.browser.esm.e5dedd98.js";async function P(i){const t=await f(i);return Object.keys(t).map(e=>{let a=t[e];return(typeof a!="string"||!a.startsWith("0x"))&&(a=D(a)),[e,a]}).reduce((e,a)=>{let[s,n]=a;return{...e,[s]:n}},{})}async function tt(i,t,e){const a=await f(i),s={sender:a.sender,nonce:a.nonce,initCodeHash:A(a.initCode),callDataHash:A(a.callData),callGasLimit:a.callGasLimit,verificationGasLimit:a.verificationGasLimit,preVerificationGas:a.preVerificationGas,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas,paymasterAndDataHash:A(a.paymasterAndData)},n={components:[{type:"address",name:"sender"},{type:"uint256",name:"nonce"},{type:"bytes32",name:"initCodeHash"},{type:"bytes32",name:"callDataHash"},{type:"uint256",name:"callGasLimit"},{type:"uint256",name:"verificationGasLimit"},{type:"uint256",name:"preVerificationGas"},{type:"uint256",name:"maxFeePerGas"},{type:"uint256",name:"maxPriorityFeePerGas"},{type:"bytes32",name:"paymasterAndDataHash"}],name:"hashedUserOp",type:"tuple"},r=T.encode([n],[{...s}]),o=A(r),h=T.encode(["bytes32","address","uint256"],[o,t,e]);return A(h)}const et=()=>{const i=BigInt(Math.floor(Math.random()*4294967296)),t=BigInt(Math.floor(Math.random()*4294967296)),e=BigInt(Math.floor(Math.random()*4294967296)),a=BigInt(Math.floor(Math.random()*4294967296)),s=BigInt(Math.floor(Math.random()*4294967296)),n=BigInt(Math.floor(Math.random()*4294967296));return i<<BigInt(160)|t<<BigInt(128)|e<<BigInt(96)|a<<BigInt(64)|s<<BigInt(32)|n},E=()=>{let i=et().toString(16);return i.length%2!==0&&(i="0"+i),i="0x"+i,d.from(V([i,"0x0000000000000000"]))};class at{}class st{constructor(t,e,a,s,n){this.bundlerUrl=t,this.entryPointAddress=e,this.chainId=a;const r={};if(F(this.bundlerUrl)){const o=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;n?r["x-secret-key"]=n:s&&(r["x-client-id"]=s,o&&(r["x-bundle-id"]=o)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(r.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(r.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,r["x-authorize-wallet"]="true"),L(r)}this.userOpJsonRpcProvider=new J({url:this.bundlerUrl,headers:r},{name:"Connected bundler network",chainId:a}),this.initializing=this.validateChainId()}async validateChainId(){const t=await this.userOpJsonRpcProvider.send("eth_chainId",[]),e=parseInt(t);if(e!==this.chainId)throw new Error(`bundler ${this.bundlerUrl} is on chainId ${e}, but provider is on chainId ${this.chainId}`)}async sendUserOpToBundler(t){await this.initializing;const e=await P(t),a=[e,this.entryPointAddress];return await this.printUserOperation("eth_sendUserOperation",a),await this.userOpJsonRpcProvider.send("eth_sendUserOperation",[e,this.entryPointAddress])}async estimateUserOpGas(t){await this.initializing;const e=await P(t),a=[e,this.entryPointAddress];return await this.printUserOperation("eth_estimateUserOperationGas",a),await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas",[e,this.entryPointAddress])}async printUserOperation(t,e){}}class rt extends at{constructor(t,e,a,s){super(),this.paymasterUrl=t,this.entryPoint=e,this.clientId=a,this.secretKey=s}async getPaymasterAndData(t){var n;const e={"Content-Type":"application/json"};if(F(this.paymasterUrl)){if(this.secretKey&&this.clientId)throw new Error("Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.");this.secretKey?e["x-secret-key"]=this.secretKey:this.clientId&&(e["x-client-id"]=this.clientId,typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis&&(e["x-bundle-id"]=globalThis.APP_BUNDLE_ID)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(e.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(e.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,e["x-authorize-wallet"]="true"),L(e)}const a=await fetch(this.paymasterUrl,{method:"POST",headers:e,body:JSON.stringify({jsonrpc:"2.0",id:1,method:"pm_sponsorUserOperation",params:[await P(t),this.entryPoint]})}),s=await a.json();if(!a.ok){const r=s.error||a.statusText,o=s.code||"UNKNOWN";throw new Error(`Paymaster error: ${r}
Status: ${a.status}
Code: ${o}`)}if(s.result)return typeof s.result=="string"?{paymasterAndData:s.result}:s.result;{const r=((n=s.error)==null?void 0:n.message)||s.error||a.statusText||"unknown error";throw new Error(`Paymaster error from ${this.paymasterUrl}: ${r}`)}}}const nt=(i,t,e,a)=>new rt(i,t,e,a);class v{constructor(t,e,a,s,n,r,o){this.resolve=t,this.reject=e,this.entryPoint=a,this.sender=s,this.userOpHash=n,this.nonce=r,this.timeout=o,N(this,"resolved",!1),this.boundLisener=this.listenerCallback.bind(this)}start(){const t=this.entryPoint.filters.UserOperationEvent(this.userOpHash);setTimeout(async()=>{const e=await this.entryPoint.queryFilter(t,-10);e.length>0?this.listenerCallback(e[0]):this.entryPoint.once(t,this.boundLisener)},100)}stop(){this.entryPoint.off("UserOperationEvent",this.boundLisener)}async listenerCallback(){var r;for(var t=arguments.length,e=new Array(t),a=0;a<t;a++)e[a]=arguments[a];const s=arguments[arguments.length-1];if(!s.args){console.error("got event without args",s);return}if(s.args.userOpHash!==this.userOpHash){console.log(`== event with wrong userOpHash: sender/nonce: event.${s.args.sender}@${s.args.nonce.toString()}!= userOp.${this.sender}@${parseInt((r=this.nonce)==null?void 0:r.toString())}`);return}const n=await s.getTransactionReceipt();s.args.success||await this.extractFailureReason(n),this.stop(),this.resolve(n),this.resolved=!0}async extractFailureReason(t){t.status=0;const e=await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash,this.sender),t.blockHash);if(e[0]){let a=e[0].args.revertReason;a.startsWith("0x08c379a0")&&(a=T.decode(["string"],"0x"+a.substring(10)).toString()),this.reject(new Error(`UserOp failed with reason: ${a}`))}}}class it extends _{constructor(t,e,a,s,n){super(),R(this,"provider",a),this.config=t,this.originalSigner=e,this.erc4337provider=a,this.httpRpcClient=s,this.smartAccountAPI=n}async sendTransaction(t,e){var h;const a=await f(t);await this.verifyAllNecessaryFields(a);const s=E(),n=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:a.to||"",data:((h=a.data)==null?void 0:h.toString())||"0x",value:a.value,gasLimit:a.gasLimit,nonce:s,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas},e),r=await this.smartAccountAPI.signUserOp(n),o=await this.erc4337provider.constructUserOpTransactionResponse(r);try{await this.httpRpcClient.sendUserOpToBundler(r)}catch(l){throw this.unwrapError(l)}return o}unwrapError(t){var e,a;try{let s="Unknown Error";if(t.error)s=`The bundler has failed to include UserOperation in a batch: ${t.error}`;else if(t.body&&typeof t.body=="string"){const r=JSON.parse(t.body),o=t.status||"UNKNOWN",h=(r==null?void 0:r.code)||"UNKNOWN";let l=((e=r==null?void 0:r.error)==null?void 0:e.message)||((a=r==null?void 0:r.error)==null?void 0:a.data)||(r==null?void 0:r.error)||t.reason;if(l!=null&&l.includes("FailedOp")){let g="";const c=l.match(/FailedOp\((.*)\)/);if(c){const y=c[1].split(",");g=`(paymaster address: ${y[1]})`,l=y[2]}s=`The bundler has failed to include UserOperation in a batch: ${l} ${g}`}else s=`RPC error: ${l}
Status: ${o}
Code: ${h}`}const n=new Error(s);return n.stack=t.stack,n}catch{}return t}async verifyAllNecessaryFields(t){if(!t.to)throw new Error("Missing call target");if(!t.data&&!t.value)throw new Error("Missing call data or value")}connect(t){throw new Error("changing providers is not supported")}async getAddress(){return this.address||(this.address=await this.erc4337provider.getSenderAccountAddress()),this.address}async signMessage(t){return await this.smartAccountAPI.checkAccountPhantom()&&this.config.deployOnSign&&(console.log("Account contract not deployed yet. Deploying account before signing message"),await(await this.sendTransaction({to:await this.getAddress(),data:"0x"})).wait()),await this.originalSigner.signMessage(t)}async signTransaction(t,e){var h;const a=await f(t);await this.verifyAllNecessaryFields(a);const s=E(),n=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:a.to||"",data:((h=a.data)==null?void 0:h.toString())||"0x",value:a.value,gasLimit:a.gasLimit,nonce:s},e),r=await this.smartAccountAPI.signUserOp(n);return JSON.stringify(await P(r))}}class ot extends q{constructor(t,e,a,s,n,r,o){super({name:"ERC-4337 Custom Network",chainId:t}),this.chainId=t,this.config=e,this.originalSigner=a,this.originalProvider=s,this.httpRpcClient=n,this.entryPoint=r,this.smartAccountAPI=o,this.signer=new it(e,a,this,n,o)}getSigner(){return this.signer}async perform(t,e){if(t==="sendTransaction"||t==="getTransactionReceipt")throw new Error("Should not get here. Investigate.");return t==="estimateGas"?d.from(5e5):await this.originalProvider.perform(t,e)}async getTransaction(t){return await super.getTransaction(t)}async getTransactionReceipt(t){const e=await t,a=await this.getSenderAccountAddress();return await new Promise((s,n)=>{new v(s,n,this.entryPoint,a,e).start()})}async getSenderAccountAddress(){return await this.smartAccountAPI.getAccountAddress()}async waitForTransaction(t,e,a){const s=await this.getSenderAccountAddress();return await new Promise((n,r)=>{new v(n,r,this.entryPoint,s,t,void 0,a).start()})}async constructUserOpTransactionResponse(t){const e=await f(t),a=await this.smartAccountAPI.getUserOpHash(e),s=async()=>await new Promise((n,r)=>{new v(n,r,this.entryPoint,e.sender,a,e.nonce).start()});return{hash:a,confirmations:0,from:e.sender,nonce:0,gasLimit:d.from(e.callGasLimit),value:d.from(0),data:D(e.callData),chainId:this.chainId,wait:async n=>{const r=await s();return e.initCode.length!==0&&await this.smartAccountAPI.checkAccountPhantom(),r}}}async detectNetwork(){return this.originalProvider.detectNetwork()}}function ct(i,t,e,a){const s=S.EntryPoint__factory.connect(i.entryPointAddress,e),n=new st(i.bundlerUrl,i.entryPointAddress,a,i.clientId,i.secretKey);return new ot(a,i,i.localSigner,e,n,s,t)}const dt="0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";class ht{constructor(t){N(this,"isPhantom",!0),this.provider=t.provider,this.entryPointAddress=t.entryPointAddress,this.accountAddress=t.accountAddress,this.paymasterAPI=t.paymasterAPI,this.gasless=t.gasless,this.entryPointView=S.EntryPoint__factory.connect(t.entryPointAddress,t.provider).connect(x)}async checkAccountPhantom(){return this.isPhantom?((await this.provider.getCode(this.getAccountAddress())).length>2&&(this.isPhantom=!1),this.isPhantom):this.isPhantom}async getInitCode(){return await this.checkAccountPhantom()?await this.getAccountInitCode():"0x"}async getVerificationGasLimit(){return 1e5}async getUserOpHash(t){const e=await this.provider.getNetwork().then(a=>a.chainId);return tt(t,this.entryPointAddress,e)}async getAccountAddress(){return this.senderAddress||(this.accountAddress?this.senderAddress=this.accountAddress:this.senderAddress=await this.getCounterFactualAddress()),this.senderAddress}async estimateCreationGas(t){if(!t||t==="0x")return 0;const e=t.substring(0,42),a="0x"+t.substring(42);return await this.provider.estimateGas({to:e,data:a})}async createUnsignedUserOp(t,e,a){var I,O,b;const s=await this.getInitCode(),n=(I=lt(e.value))!=null?I:d.from(0),r=a!=null&&a.batchData?e.data:await this.prepareExecute(e.target,n,e.data).then(u=>u.encode());let{maxFeePerGas:o,maxPriorityFeePerGas:h}=e;if(!o||!h){const u=await Y(this.provider);if(h||(h=(O=u.maxPriorityFeePerGas)!=null?O:void 0),!o){o=(b=u.maxFeePerGas)!=null?b:void 0;const w=(await this.provider.getNetwork()).chainId;(w===Z.chainId||w===Q.chainId||w===X.chainId)&&(h=o)}}if(!o||!h)throw new Error("maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely");const[l,g]=await Promise.all([this.getAccountAddress(),e.nonce?Promise.resolve(e.nonce):this.getNonce()]),c={sender:l,nonce:g,initCode:s,callData:r,maxFeePerGas:o,maxPriorityFeePerGas:h,callGasLimit:d.from(1e6),verificationGasLimit:d.from(1e6),preVerificationGas:d.from(1e6),paymasterAndData:"0x",signature:dt};if((a==null?void 0:a.gasless)!==void 0?a.gasless:this.gasless){const u=await this.paymasterAPI.getPaymasterAndData(c),p=u.paymasterAndData;if(p&&p!=="0x"&&(c.paymasterAndData=p),u.callGasLimit&&u.verificationGasLimit&&u.preVerificationGas)c.callGasLimit=d.from(u.callGasLimit),c.verificationGasLimit=d.from(u.verificationGasLimit),c.preVerificationGas=d.from(u.preVerificationGas);else{let w;try{w=await t.estimateUserOpGas(c)}catch(m){throw this.unwrapBundlerError(m)}if(c.callGasLimit=d.from(w.callGasLimit),c.verificationGasLimit=d.from(w.verificationGasLimit),c.preVerificationGas=d.from(w.preVerificationGas),p&&p!=="0x"){const m=await this.paymasterAPI.getPaymasterAndData(c);m.paymasterAndData&&m.paymasterAndData!=="0x"&&(c.paymasterAndData=m.paymasterAndData)}}}else{let u;try{u=await t.estimateUserOpGas(c)}catch(p){throw this.unwrapBundlerError(p)}c.callGasLimit=d.from(u.callGasLimit),c.verificationGasLimit=d.from(u.verificationGasLimit),c.preVerificationGas=d.from(u.preVerificationGas)}return{...c,signature:""}}async signUserOp(t){const e=await this.getUserOpHash(t),a=await this.signUserOpHash(e);return{...t,signature:a}}async getUserOpReceipt(t){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:3e4,a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:2e3;const s=Date.now()+e;for(;Date.now()<s;){const n=await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(t));if(n[0])return n[0].transactionHash;await new Promise(r=>setTimeout(r,a))}return null}unwrapBundlerError(t){var a;const e=((a=t==null?void 0:t.error)==null?void 0:a.message)||t.error||t.message||t;return new Error(e)}}function lt(i){return!i||i===""?null:d.from(i.toString())}class ut extends ht{constructor(t,e){super({...t,provider:e}),this.params=t,this.sdk=C.fromPrivateKey(W,t.chain,{clientId:t.clientId,secretKey:t.secretKey,supportedChains:typeof t.chain=="object"?[t.chain]:void 0})}async getChainId(){return await this.provider.getNetwork().then(t=>t.chainId)}async getAccountContract(){var t;return this.accountContract||((t=this.params.accountInfo)!=null&&t.abi?this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),this.params.accountInfo.abi):this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),M)),this.accountContract}async getAccountInitCode(){const t=await this.getFactoryContract();console.log("Deploying smart wallet via factory");const e=await this.params.localSigner.getAddress(),a=await this.params.factoryInfo.createAccount(t,e);try{console.log("Cost to deploy smart wallet: ",(await a.estimateGasCost()).ether,"ETH")}catch(s){console.error("Cost to deploy smart wallet: unknown",s)}return z([t.getAddress(),a.encode()])}async getFactoryContract(){var t;return this.factoryContract?this.factoryContract:((t=this.params.factoryInfo)!=null&&t.abi?this.factoryContract=await this.sdk.getContract(this.params.factoryAddress,this.params.factoryInfo.abi):this.factoryContract=await this.sdk.getContract(this.params.factoryAddress),this.factoryContract)}async getCounterFactualAddress(){if(this.params.accountAddress)return this.params.accountAddress;const t=await this.getFactoryContract(),e=await this.params.localSigner.getAddress();return this.params.factoryInfo.getAccountAddress(t,e)}async getNonce(){if(await this.checkAccountPhantom())return d.from(0);const t=await this.getAccountContract();return this.params.accountInfo.getNonce(t)}async prepareExecute(t,e,a){const s=await this.getAccountContract();return this.params.accountInfo.execute(s,t,e,a)}async prepareExecuteBatch(t,e,a){return(await this.getAccountContract()).prepare("executeBatch",[t,e,a])}async signUserOpHash(t){return await this.params.localSigner.signMessage(j(t))}async isAcountDeployed(){return!await this.checkAccountPhantom()}}class wt extends k{constructor(t){super(),this.config=t}async initialize(t){var c;const e=this.config,a=B(e.chain,{clientId:e.clientId,secretKey:e.secretKey});this.chainId=(await a.getNetwork()).chainId;const s=this.config.bundlerUrl||`https://${this.chainId}.bundler.thirdweb.com`,n=this.config.paymasterUrl||`https://${this.chainId}.bundler.thirdweb.com/v2`,r=e.entryPointAddress||H,o=(c=e.deployOnSign)!=null?c:!0,h=await t.personalWallet.getSigner(),l={chain:e.chain,localSigner:h,entryPointAddress:r,bundlerUrl:s,paymasterAPI:this.config.paymasterAPI?this.config.paymasterAPI:nt(n,r,this.config.clientId,this.config.secretKey),gasless:e.gasless,deployOnSign:o,factoryAddress:e.factoryAddress,accountAddress:t.accountAddress,factoryInfo:e.factoryInfo||this.defaultFactoryInfo(),accountInfo:e.accountInfo||this.defaultAccountInfo(),clientId:e.clientId,secretKey:e.secretKey};this.personalWallet=t.personalWallet;const g=new ut(l,a);this.aaProvider=ct(l,g,a,this.chainId),this.accountApi=g}async connect(t){return await this.initialize(t),await this.getAddress()}getProvider(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider)}async getSigner(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider.getSigner())}async getAddress(){return(await this.getSigner()).getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async disconnect(){this.personalWallet=void 0,this.aaProvider=void 0}async switchChain(t){if((await(await this.getProvider()).getNetwork()).chainId!==t)throw new Error("Not supported.")}setupListeners(){return Promise.resolve()}updateChains(t){}async hasPermissionToExecute(t){var r;const e=await this.getAccountContract(),s=await(await this.getSigner()).getAddress(),n=(r=(await e.account.getAllSigners()).filter(o=>G(o.signer)===G(s))[0])==null?void 0:r.permissions;return n?n.approvedCallTargets.includes(t.getTarget()):!1}async send(t,e){return(await this.getSigner()).sendTransaction({to:t.getTarget(),data:t.encode(),value:await t.getValue()},e)}async execute(t,e){return{receipt:await(await this.send(t,e)).wait()}}async sendBatch(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await this.getSigner(),{tx:s,batchData:n}=await this.prepareBatchTx(t);return await a.sendTransaction({to:await a.getAddress(),data:s.encode(),value:0},{...e,batchData:n})}async executeBatch(t,e){return{receipt:await(await this.sendBatch(t,e)).wait()}}async sendRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");return(await this.getSigner()).sendTransaction(t,e)}async executeRaw(t,e){return{receipt:await(await this.sendRaw(t,e)).wait()}}async sendBatchRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await this.getSigner(),s=await this.prepareBatchRaw(t);return a.sendTransaction({to:await a.getAddress(),data:s.tx.encode(),value:0},{...e,batchData:s.batchData})}async executeBatchRaw(t,e){return{receipt:await(await this.sendBatchRaw(t,e)).wait()}}async estimate(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");return this.estimateTx({target:t.getTarget(),data:t.encode(),value:await t.getValue(),gasLimit:await t.getOverrides().gasLimit,maxFeePerGas:await t.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await t.getOverrides().maxPriorityFeePerGas,nonce:await t.getOverrides().nonce},e)}async estimateRaw(t,e){var s;if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await f(t);return this.estimateTx({target:a.to||x,data:((s=a.data)==null?void 0:s.toString())||"",value:a.value||d.from(0),gasLimit:a.gasLimit,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas,nonce:a.nonce},e)}async estimateBatch(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:a,batchData:s}=await this.prepareBatchTx(t);return this.estimateTx({target:a.getTarget(),data:a.encode(),value:await a.getValue(),gasLimit:await a.getOverrides().gasLimit,maxFeePerGas:await a.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await a.getOverrides().maxPriorityFeePerGas,nonce:await a.getOverrides().nonce},{...e,batchData:s})}async estimateBatchRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:a,batchData:s}=await this.prepareBatchRaw(t);return this.estimateTx({target:a.getTarget(),data:a.encode(),value:await a.getValue(),gasLimit:await a.getOverrides().gasLimit,maxFeePerGas:await a.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await a.getOverrides().maxPriorityFeePerGas,nonce:await a.getOverrides().nonce},{...e,batchData:s})}async deploy(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await this.getSigner();return{receipt:await(await e.sendTransaction({to:await e.getAddress(),data:"0x"},{...t,batchData:{targets:[],data:[],values:[]}})).wait()}}async isDeployed(){if(!this.accountApi)throw new Error("Personal wallet not connected");return await this.accountApi.isAcountDeployed()}async deployIfNeeded(t){await this.isDeployed()||await this.deploy(t)}async grantPermissions(t,e){return await this.deployIfNeeded(),(await this.getAccountContract()).account.grantPermissions(t,e)}async revokePermissions(t){return await this.deployIfNeeded(),(await this.getAccountContract()).account.revokeAccess(t)}async addAdmin(t){return await this.deployIfNeeded(),(await this.getAccountContract()).account.grantAdminPermissions(t)}async removeAdmin(t){return await this.deployIfNeeded(),(await this.getAccountContract()).account.revokeAdminPermissions(t)}async getAllActiveSigners(){var e;if(await this.isDeployed())return(await this.getAccountContract()).account.getAllAdminsAndSigners();{const a=await((e=this.personalWallet)==null?void 0:e.getSigner());if(!a)throw new Error("Personal wallet not connected");return[{isAdmin:!0,signer:await a.getAddress(),permissions:{startDate:new Date(0),expirationDate:new Date(0),nativeTokenLimitPerTransaction:d.from(0),approvedCallTargets:[]}}]}}async getAccountContract(){var a;if(!await this.isDeployed())throw new Error("Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.");const e=C.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(a=this.config.accountInfo)!=null&&a.abi?e.getContract(await this.getAddress(),this.config.accountInfo.abi):e.getContract(await this.getAddress())}async getFactoryContract(){var e;const t=C.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(e=this.config.factoryInfo)!=null&&e.abi?t.getContract(this.config.factoryAddress,this.config.factoryInfo.abi):t.getContract(this.config.factoryAddress)}defaultFactoryInfo(){return{createAccount:async(t,e)=>t.prepare("createAccount",[e,U("")]),getAccountAddress:async(t,e)=>await t.call("getAddress",[e,U("")])}}defaultAccountInfo(){return{execute:async(t,e,a,s)=>t.prepare("execute",[e,a,s]),getNonce:async t=>t.call("getNonce",[])}}async estimateTx(t,e){if(!this.accountApi||!this.aaProvider)throw new Error("Personal wallet not connected");let a=d.from(0);const[s,n]=await Promise.all([this.getProvider(),this.isDeployed()]);n||(a=await this.estimateDeploymentGasLimit());const[r,o]=await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient,t,e),K(s)]),h=await f(r),l=d.from(h.callGasLimit),g=l.mul(o),c=a.mul(o),y=c.add(g);return{ether:$(y),wei:y,details:{deployGasLimit:a,transactionGasLimit:l,gasPrice:o,transactionCost:g,deployCost:c,totalCost:y}}}async estimateDeploymentGasLimit(){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await this.accountApi.getInitCode(),[e,a]=await Promise.all([this.accountApi.estimateCreationGas(t),this.accountApi.getVerificationGasLimit()]);return d.from(a).add(e)}async prepareBatchRaw(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await Promise.all(t.map(r=>f(r))),a=e.map(r=>r.to||x),s=e.map(r=>r.data||"0x"),n=e.map(r=>r.value||d.from(0));return{tx:await this.accountApi.prepareExecuteBatch(a,n,s),batchData:{targets:a,data:s,values:n}}}async prepareBatchTx(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=t.map(n=>n.getTarget()),a=t.map(n=>n.encode()),s=await Promise.all(t.map(n=>n.getValue()));return{tx:await this.accountApi.prepareExecuteBatch(e,s,a),batchData:{targets:e,data:a,values:s}}}}export{wt as SmartWalletConnector};
