import{C as w,_ as n,D as g,w as l,a as y,x as f,z as h,y as c,cv as p,cw as E,cx as d}from"./index.7594c645.js";var a=new WeakMap,r=new WeakMap;class S extends w{constructor(e){super(),n(this,"id",g.paper),n(this,"name","Embedded Wallet"),n(this,"ready",!0),n(this,"user",null),l(this,a,{writable:!0,value:void 0}),l(this,r,{writable:!0,value:void 0}),n(this,"onAccountsChanged",async t=>{t.length===0?await this.onDisconnect():this.emit("change",{account:y(t[0])})}),n(this,"onChainChanged",t=>{const i=f(t),s=this.options.chains.findIndex(o=>o.chainId===i)===-1;this.emit("change",{chain:{id:i,unsupported:s}})}),n(this,"onDisconnect",async()=>{this.emit("disconnect")}),this.options=e}getEmbeddedWalletSDK(){return h(this,a)||c(this,a,new p({clientId:this.options.clientId,chain:"Ethereum",onAuthSuccess:this.options.onAuthSuccess})),h(this,a)}async connect(e){if(e){if(!e.authResult)throw new Error("Missing authData - call authenticate() first with your authentication strategy");if(!e.authResult.user)throw new Error("Missing authData.user - call authenticate() first with your authentication strategy");this.user=e.authResult.user}else{const t=await this.authenticate({strategy:"iframe"});if(!t.user)throw new Error("Error connecting User");this.user=t.user}return e!=null&&e.chainId&&this.switchChain(e.chainId),this.getAddress()}async disconnect(){const e=h(this,a);await(e==null?void 0:e.auth.logout()),c(this,r,void 0),c(this,a,void 0),this.user=null}async getAddress(){if(!this.user)throw new Error("Embedded Wallet is not connected");return await this.getSigner().then(e=>e.getAddress())}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async getProvider(){const e=await this.getSigner();if(!e.provider)throw new Error("Provider not found");return e.provider}async getSigner(){if(h(this,r))return h(this,r);const t=await(await this.getUser()).wallet.getEthersJsSigner({rpcEndpoint:this.options.chain.rpc[0]||""});if(!t)throw new Error("Signer not found");return c(this,r,t),t}async isAuthorized(){return!1}async switchChain(e){var i,s;const t=this.options.chains.find(o=>o.chainId===e);if(!t)throw new Error("Chain not configured");try{await((i=this.user)==null?void 0:i.wallet.setChain({chain:"Ethereum"})),c(this,r,await((s=this.user)==null?void 0:s.wallet.getEthersJsSigner({rpcEndpoint:t.rpc[0]||""}))),this.emit("change",{chain:{id:e,unsupported:!1}})}catch(o){console.warn("Failed to switch chain",o)}}async setupListeners(){return Promise.resolve()}updateChains(e){this.options.chains=e}async getUser(){if(!this.user||!this.user.wallet||!this.user.wallet.getEthersJsSigner){const t=await this.getEmbeddedWalletSDK().getUser();switch(t.status){case E.LOGGED_IN_WALLET_INITIALIZED:{this.user=t;break}default:throw new Error("Embedded Wallet is not authenticated, please authenticate first")}}return this.user}async getEmail(){return(await this.getUser()).authDetails.email}async getRecoveryInformation(){return(await this.getUser()).authDetails}async sendVerificationEmail(e){let{email:t}=e;return this.getEmbeddedWalletSDK().auth.sendEmailLoginOtp({email:t})}async authenticate(e){const t=this.getEmbeddedWalletSDK(),i=e.strategy;switch(i){case"email_verification":return await t.auth.verifyEmailLoginOtp({email:e.email,otp:e.verificationCode,recoveryCode:e.recoveryCode});case"apple":case"facebook":case"google":{const s=v[i];return t.auth.loginWithOauth({oauthProvider:s,closeOpenedWindow:e.closeOpenedWindow,openedWindow:e.openedWindow})}case"jwt":return t.auth.loginWithCustomJwt({jwt:e.jwt,encryptionKey:e.encryptionKey});case"auth_endpoint":return t.auth.loginWithCustomAuthEndpoint({payload:e.payload,encryptionKey:e.encryptionKey});case"iframe_email_verification":return t.auth.loginWithEmailOtp({email:e.email});case"iframe":return t.auth.loginWithModal();default:m(i)}}}function m(u){throw new Error("Invalid param: "+u)}const v={google:d.GOOGLE,facebook:d.FACEBOOK,apple:d.APPLE};export{S as EmbeddedWalletConnector};
